using System;
using System.IO;
using System.Linq;

using Import.Structures;

namespace Import.Helpers {
    public class Palette {
        public static Palette Monochrome = new Palette((i) => new Color((byte)(i >> 1)));
        
        public static Palette NovationPalette = new Palette(new Color[128] {
            new Color(0, 0, 0),
            new Color(7, 7, 7),
            new Color(31, 31, 31),
            new Color(63, 63, 63),
            new Color(63, 18, 18),
            new Color(63, 0, 0),
            new Color(21, 0, 0),
            new Color(6, 0, 0),
            new Color(63, 46, 26),
            new Color(63, 20, 0),
            new Color(21, 7, 0),
            new Color(9, 6, 0),
            new Color(63, 63, 18),
            new Color(63, 63, 0),
            new Color(21, 21, 0),
            new Color(6, 6, 0),
            new Color(33, 63, 18),
            new Color(20, 63, 0),
            new Color(7, 21, 0),
            new Color(4, 10, 0),
            new Color(18, 63, 18),
            new Color(0, 63, 0),
            new Color(0, 21, 0),
            new Color(0, 6, 0),
            new Color(18, 63, 23),
            new Color(0, 63, 6),
            new Color(0, 21, 3),
            new Color(0, 6, 0),
            new Color(18, 63, 33),
            new Color(0, 63, 21),
            new Color(0, 21, 7),
            new Color(0, 7, 4),
            new Color(18, 63, 45),
            new Color(0, 63, 37),
            new Color(0, 21, 13),
            new Color(0, 6, 4),
            new Color(18, 48, 63),
            new Color(0, 41, 63),
            new Color(0, 16, 20),
            new Color(0, 3, 6),
            new Color(18, 33, 63),
            new Color(0, 21, 63),
            new Color(0, 7, 21),
            new Color(0, 1, 6),
            new Color(18, 18, 63),
            new Color(0, 0, 63),
            new Color(0, 0, 21),
            new Color(0, 0, 6),
            new Color(33, 18, 63),
            new Color(20, 0, 63),
            new Color(6, 0, 24),
            new Color(3, 0, 11),
            new Color(63, 18, 63),
            new Color(63, 0, 63),
            new Color(21, 0, 21),
            new Color(6, 0, 6),
            new Color(63, 18, 33),
            new Color(63, 0, 20),
            new Color(21, 0, 7),
            new Color(8, 0, 4),
            new Color(63, 5, 0),
            new Color(37, 13, 0),
            new Color(29, 20, 0),
            new Color(16, 24, 0),
            new Color(0, 14, 0),
            new Color(0, 21, 13),
            new Color(0, 20, 31),
            new Color(0, 0, 63),
            new Color(0, 17, 19),
            new Color(9, 0, 50),
            new Color(31, 31, 31),
            new Color(7, 7, 7),
            new Color(63, 0, 0),
            new Color(46, 63, 11),
            new Color(43, 58, 1),
            new Color(24, 63, 2),
            new Color(3, 34, 0),
            new Color(0, 63, 33),
            new Color(0, 41, 63),
            new Color(0, 10, 63),
            new Color(15, 0, 63),
            new Color(30, 0, 63),
            new Color(43, 6, 30),
            new Color(15, 8, 0),
            new Color(63, 18, 0),
            new Color(33, 55, 1),
            new Color(28, 63, 5),
            new Color(0, 63, 0),
            new Color(14, 63, 9),
            new Color(21, 63, 27),
            new Color(13, 63, 50),
            new Color(22, 34, 63),
            new Color(12, 20, 48),
            new Color(33, 31, 57),
            new Color(52, 7, 63),
            new Color(63, 0, 22),
            new Color(63, 31, 0),
            new Color(45, 43, 0),
            new Color(35, 63, 0),
            new Color(32, 22, 1),
            new Color(14, 10, 0),
            new Color(4, 18, 3),
            new Color(3, 19, 13),
            new Color(5, 5, 10),
            new Color(5, 7, 22),
            new Color(25, 14, 6),
            new Color(41, 0, 2),
            new Color(54, 20, 15),
            new Color(53, 26, 6),
            new Color(63, 55, 9),
            new Color(39, 55, 11),
            new Color(25, 44, 3),
            new Color(7, 7, 11),
            new Color(54, 63, 26),
            new Color(31, 63, 46),
            new Color(38, 37, 63),
            new Color(35, 25, 63),
            new Color(15, 15, 15),
            new Color(28, 28, 28),
            new Color(55, 63, 63),
            new Color(39, 0, 0),
            new Color(13, 0, 0),
            new Color(6, 51, 0),
            new Color(1, 16, 0),
            new Color(45, 43, 0),
            new Color(15, 12, 0),
            new Color(44, 23, 0),
            new Color(18, 5, 0)
        });

        public static Palette mat1jaczyyyPalette = new Palette(new Color[128] {
            new Color(0, 0, 0),
            new Color(15, 0, 0),
            new Color(31, 0, 0),
            new Color(47, 0, 0),
            new Color(63, 15, 15),
            new Color(63, 0, 0),
            new Color(15, 3, 0),
            new Color(31, 7, 0),
            new Color(47, 11, 0),
            new Color(63, 27, 15),
            new Color(63, 15, 0),
            new Color(15, 7, 0),
            new Color(31, 15, 0),
            new Color(47, 23, 0),
            new Color(63, 39, 15),
            new Color(63, 31, 0),
            new Color(15, 11, 0),
            new Color(31, 23, 0),
            new Color(47, 35, 0),
            new Color(63, 51, 15),
            new Color(63, 47, 0),
            new Color(15, 15, 0),
            new Color(31, 31, 0),
            new Color(47, 47, 0),
            new Color(63, 63, 15),
            new Color(63, 63, 0),
            new Color(11, 15, 0),
            new Color(23, 31, 0),
            new Color(35, 47, 0),
            new Color(51, 63, 15),
            new Color(47, 63, 0),
            new Color(7, 15, 0),
            new Color(15, 31, 0),
            new Color(23, 47, 0),
            new Color(39, 63, 15),
            new Color(31, 63, 0),
            new Color(3, 15, 0),
            new Color(7, 31, 0),
            new Color(11, 47, 0),
            new Color(27, 63, 15),
            new Color(15, 63, 0),
            new Color(0, 15, 0),
            new Color(0, 31, 0),
            new Color(0, 47, 0),
            new Color(15, 63, 15),
            new Color(0, 63, 0),
            new Color(0, 15, 3),
            new Color(0, 31, 7),
            new Color(0, 47, 11),
            new Color(15, 63, 27),
            new Color(0, 63, 15),
            new Color(0, 15, 7),
            new Color(0, 31, 15),
            new Color(0, 47, 23),
            new Color(15, 63, 39),
            new Color(0, 63, 31),
            new Color(0, 15, 11),
            new Color(0, 31, 23),
            new Color(0, 47, 35),
            new Color(15, 63, 51),
            new Color(0, 63, 47),
            new Color(0, 15, 15),
            new Color(0, 31, 31),
            new Color(0, 47, 47),
            new Color(15, 62, 63),
            new Color(0, 63, 63),
            new Color(0, 11, 15),
            new Color(0, 23, 31),
            new Color(0, 35, 47),
            new Color(15, 51, 63),
            new Color(0, 47, 63),
            new Color(0, 7, 15),
            new Color(0, 15, 31),
            new Color(0, 23, 47),
            new Color(15, 39, 63),
            new Color(0, 31, 63),
            new Color(0, 3, 15),
            new Color(0, 7, 31),
            new Color(0, 11, 47),
            new Color(15, 27, 63),
            new Color(0, 15, 63),
            new Color(0, 0, 15),
            new Color(0, 0, 31),
            new Color(0, 0, 47),
            new Color(15, 15, 63),
            new Color(0, 0, 63),
            new Color(3, 0, 15),
            new Color(7, 0, 31),
            new Color(11, 0, 47),
            new Color(27, 15, 63),
            new Color(15, 0, 63),
            new Color(7, 0, 15),
            new Color(15, 0, 31),
            new Color(23, 0, 47),
            new Color(39, 15, 63),
            new Color(31, 0, 63),
            new Color(11, 0, 15),
            new Color(23, 0, 31),
            new Color(35, 0, 47),
            new Color(51, 15, 63),
            new Color(47, 0, 63),
            new Color(15, 0, 15),
            new Color(31, 0, 31),
            new Color(47, 0, 47),
            new Color(62, 15, 62),
            new Color(63, 0, 63),
            new Color(15, 0, 11),
            new Color(31, 0, 23),
            new Color(47, 0, 35),
            new Color(63, 15, 51),
            new Color(63, 0, 47),
            new Color(15, 0, 7),
            new Color(31, 0, 15),
            new Color(47, 0, 23),
            new Color(63, 15, 39),
            new Color(63, 0, 31),
            new Color(15, 0, 3),
            new Color(31, 0, 7),
            new Color(47, 0, 11),
            new Color(63, 15, 27),
            new Color(63, 0, 15),
            new Color(9, 9, 9),
            new Color(18, 18, 18),
            new Color(27, 27, 27),
            new Color(36, 36, 36),
            new Color(45, 45, 45),
            new Color(54, 54, 54),
            new Color(63, 63, 63)
        });

        public static Palette Decode(Stream file) {
            Color[] palette = new Color[128];

            using (StreamReader reader = new StreamReader(file)) {
                try {
                    for (int i = 0; i < 128; i++) {
                        byte[] split = reader.ReadLine().TrimEnd(';').Split(", ")[1].Split(' ').Select((x) => Convert.ToByte(x)).ToArray();
                        palette[i] = new Color(split[0], split[1], split[2]);
                    }
                } catch {
                    return null;
                }
            }

            return new Palette(palette);
        }

        public readonly Color[] BackingArray;

        Func<byte, Color> _converter;

        public Palette(Func<byte, Color> converter) => _converter = converter;

        public Palette(Color[] palette) {
            if (palette.Length == 128) {
                BackingArray = palette;
                _converter = (i) => BackingArray[i].Clone();
            }
        }
        
        public Color GetColor(byte color) => _converter.Invoke(color);

        public bool Equals(Palette other)
            => Enumerable.Range(0, 128).Select(i => GetColor((byte)i)).SequenceEqual(
                Enumerable.Range(0, 128).Select(i => other.GetColor((byte)i))
            );
    }
}